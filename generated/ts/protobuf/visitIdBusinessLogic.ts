// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: visitIdBusinessLogic.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "VisitId";

export interface VisitIdBusinessLogic {
  name: string;
  cookieExpiration: number;
  containsAttributionQueryParams: boolean;
  visitId?:
    | string
    | undefined;
  /** If provided, the visit_id will be parsed from this cookie */
  cookieName?: string | undefined;
  attributionParams: { [key: string]: string };
}

export interface VisitIdBusinessLogic_AttributionParamsEntry {
  key: string;
  value: string;
}

export interface AttributionParams {
  params: { [key: string]: string };
}

export interface AttributionParams_ParamsEntry {
  key: string;
  value: string;
}

/** These are the valid keys for attribution_params */
export interface AttributionParamKeys {
  urlParams: string;
  utmSource: string;
  utmMedium: string;
  utmCampaign: string;
  utmTerm: string;
  utmContent: string;
  gclid: string;
  fbclid: string;
  msclkid: string;
  dclid: string;
  adId: string;
  adName: string;
  adGroupId: string;
  adGroupName: string;
  gtmId: string;
  gtmEvent: string;
  gtmTrigger: string;
  gtmVariable: string;
  gtmDataLayer: string;
  gtmContainer: string;
  gtmAccount: string;
  gtmWorkspace: string;
  gtmVersion: string;
  gtmEnvironment: string;
}

function createBaseVisitIdBusinessLogic(): VisitIdBusinessLogic {
  return {
    name: "",
    cookieExpiration: 0,
    containsAttributionQueryParams: false,
    visitId: undefined,
    cookieName: undefined,
    attributionParams: {},
  };
}

export const VisitIdBusinessLogic: MessageFns<VisitIdBusinessLogic> = {
  encode(message: VisitIdBusinessLogic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.cookieExpiration !== 0) {
      writer.uint32(16).int32(message.cookieExpiration);
    }
    if (message.containsAttributionQueryParams !== false) {
      writer.uint32(24).bool(message.containsAttributionQueryParams);
    }
    if (message.visitId !== undefined) {
      writer.uint32(34).string(message.visitId);
    }
    if (message.cookieName !== undefined) {
      writer.uint32(42).string(message.cookieName);
    }
    Object.entries(message.attributionParams).forEach(([key, value]) => {
      VisitIdBusinessLogic_AttributionParamsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VisitIdBusinessLogic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVisitIdBusinessLogic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.cookieExpiration = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.containsAttributionQueryParams = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.visitId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.cookieName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = VisitIdBusinessLogic_AttributionParamsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.attributionParams[entry6.key] = entry6.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VisitIdBusinessLogic {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      cookieExpiration: isSet(object.cookieExpiration) ? globalThis.Number(object.cookieExpiration) : 0,
      containsAttributionQueryParams: isSet(object.containsAttributionQueryParams)
        ? globalThis.Boolean(object.containsAttributionQueryParams)
        : false,
      visitId: isSet(object.visitId) ? globalThis.String(object.visitId) : undefined,
      cookieName: isSet(object.cookieName) ? globalThis.String(object.cookieName) : undefined,
      attributionParams: isObject(object.attributionParams)
        ? Object.entries(object.attributionParams).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: VisitIdBusinessLogic): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.cookieExpiration !== 0) {
      obj.cookieExpiration = Math.round(message.cookieExpiration);
    }
    if (message.containsAttributionQueryParams !== false) {
      obj.containsAttributionQueryParams = message.containsAttributionQueryParams;
    }
    if (message.visitId !== undefined) {
      obj.visitId = message.visitId;
    }
    if (message.cookieName !== undefined) {
      obj.cookieName = message.cookieName;
    }
    if (message.attributionParams) {
      const entries = Object.entries(message.attributionParams);
      if (entries.length > 0) {
        obj.attributionParams = {};
        entries.forEach(([k, v]) => {
          obj.attributionParams[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VisitIdBusinessLogic>, I>>(base?: I): VisitIdBusinessLogic {
    return VisitIdBusinessLogic.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VisitIdBusinessLogic>, I>>(object: I): VisitIdBusinessLogic {
    const message = createBaseVisitIdBusinessLogic();
    message.name = object.name ?? "";
    message.cookieExpiration = object.cookieExpiration ?? 0;
    message.containsAttributionQueryParams = object.containsAttributionQueryParams ?? false;
    message.visitId = object.visitId ?? undefined;
    message.cookieName = object.cookieName ?? undefined;
    message.attributionParams = Object.entries(object.attributionParams ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseVisitIdBusinessLogic_AttributionParamsEntry(): VisitIdBusinessLogic_AttributionParamsEntry {
  return { key: "", value: "" };
}

export const VisitIdBusinessLogic_AttributionParamsEntry: MessageFns<VisitIdBusinessLogic_AttributionParamsEntry> = {
  encode(
    message: VisitIdBusinessLogic_AttributionParamsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VisitIdBusinessLogic_AttributionParamsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVisitIdBusinessLogic_AttributionParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VisitIdBusinessLogic_AttributionParamsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: VisitIdBusinessLogic_AttributionParamsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VisitIdBusinessLogic_AttributionParamsEntry>, I>>(
    base?: I,
  ): VisitIdBusinessLogic_AttributionParamsEntry {
    return VisitIdBusinessLogic_AttributionParamsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VisitIdBusinessLogic_AttributionParamsEntry>, I>>(
    object: I,
  ): VisitIdBusinessLogic_AttributionParamsEntry {
    const message = createBaseVisitIdBusinessLogic_AttributionParamsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAttributionParams(): AttributionParams {
  return { params: {} };
}

export const AttributionParams: MessageFns<AttributionParams> = {
  encode(message: AttributionParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.params).forEach(([key, value]) => {
      AttributionParams_ParamsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributionParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributionParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = AttributionParams_ParamsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.params[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributionParams {
    return {
      params: isObject(object.params)
        ? Object.entries(object.params).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: AttributionParams): unknown {
    const obj: any = {};
    if (message.params) {
      const entries = Object.entries(message.params);
      if (entries.length > 0) {
        obj.params = {};
        entries.forEach(([k, v]) => {
          obj.params[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AttributionParams>, I>>(base?: I): AttributionParams {
    return AttributionParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AttributionParams>, I>>(object: I): AttributionParams {
    const message = createBaseAttributionParams();
    message.params = Object.entries(object.params ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseAttributionParams_ParamsEntry(): AttributionParams_ParamsEntry {
  return { key: "", value: "" };
}

export const AttributionParams_ParamsEntry: MessageFns<AttributionParams_ParamsEntry> = {
  encode(message: AttributionParams_ParamsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributionParams_ParamsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributionParams_ParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributionParams_ParamsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AttributionParams_ParamsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AttributionParams_ParamsEntry>, I>>(base?: I): AttributionParams_ParamsEntry {
    return AttributionParams_ParamsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AttributionParams_ParamsEntry>, I>>(
    object: I,
  ): AttributionParams_ParamsEntry {
    const message = createBaseAttributionParams_ParamsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAttributionParamKeys(): AttributionParamKeys {
  return {
    urlParams: "",
    utmSource: "",
    utmMedium: "",
    utmCampaign: "",
    utmTerm: "",
    utmContent: "",
    gclid: "",
    fbclid: "",
    msclkid: "",
    dclid: "",
    adId: "",
    adName: "",
    adGroupId: "",
    adGroupName: "",
    gtmId: "",
    gtmEvent: "",
    gtmTrigger: "",
    gtmVariable: "",
    gtmDataLayer: "",
    gtmContainer: "",
    gtmAccount: "",
    gtmWorkspace: "",
    gtmVersion: "",
    gtmEnvironment: "",
  };
}

export const AttributionParamKeys: MessageFns<AttributionParamKeys> = {
  encode(message: AttributionParamKeys, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.urlParams !== "") {
      writer.uint32(10).string(message.urlParams);
    }
    if (message.utmSource !== "") {
      writer.uint32(18).string(message.utmSource);
    }
    if (message.utmMedium !== "") {
      writer.uint32(26).string(message.utmMedium);
    }
    if (message.utmCampaign !== "") {
      writer.uint32(34).string(message.utmCampaign);
    }
    if (message.utmTerm !== "") {
      writer.uint32(42).string(message.utmTerm);
    }
    if (message.utmContent !== "") {
      writer.uint32(50).string(message.utmContent);
    }
    if (message.gclid !== "") {
      writer.uint32(58).string(message.gclid);
    }
    if (message.fbclid !== "") {
      writer.uint32(66).string(message.fbclid);
    }
    if (message.msclkid !== "") {
      writer.uint32(74).string(message.msclkid);
    }
    if (message.dclid !== "") {
      writer.uint32(82).string(message.dclid);
    }
    if (message.adId !== "") {
      writer.uint32(90).string(message.adId);
    }
    if (message.adName !== "") {
      writer.uint32(98).string(message.adName);
    }
    if (message.adGroupId !== "") {
      writer.uint32(106).string(message.adGroupId);
    }
    if (message.adGroupName !== "") {
      writer.uint32(114).string(message.adGroupName);
    }
    if (message.gtmId !== "") {
      writer.uint32(122).string(message.gtmId);
    }
    if (message.gtmEvent !== "") {
      writer.uint32(130).string(message.gtmEvent);
    }
    if (message.gtmTrigger !== "") {
      writer.uint32(138).string(message.gtmTrigger);
    }
    if (message.gtmVariable !== "") {
      writer.uint32(146).string(message.gtmVariable);
    }
    if (message.gtmDataLayer !== "") {
      writer.uint32(154).string(message.gtmDataLayer);
    }
    if (message.gtmContainer !== "") {
      writer.uint32(162).string(message.gtmContainer);
    }
    if (message.gtmAccount !== "") {
      writer.uint32(170).string(message.gtmAccount);
    }
    if (message.gtmWorkspace !== "") {
      writer.uint32(178).string(message.gtmWorkspace);
    }
    if (message.gtmVersion !== "") {
      writer.uint32(186).string(message.gtmVersion);
    }
    if (message.gtmEnvironment !== "") {
      writer.uint32(194).string(message.gtmEnvironment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributionParamKeys {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributionParamKeys();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.urlParams = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.utmSource = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.utmMedium = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.utmCampaign = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.utmTerm = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.utmContent = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.gclid = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.fbclid = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.msclkid = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.dclid = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.adId = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.adName = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.adGroupId = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.adGroupName = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.gtmId = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.gtmEvent = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.gtmTrigger = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.gtmVariable = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.gtmDataLayer = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.gtmContainer = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.gtmAccount = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.gtmWorkspace = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.gtmVersion = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.gtmEnvironment = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributionParamKeys {
    return {
      urlParams: isSet(object.urlParams) ? globalThis.String(object.urlParams) : "",
      utmSource: isSet(object.utmSource) ? globalThis.String(object.utmSource) : "",
      utmMedium: isSet(object.utmMedium) ? globalThis.String(object.utmMedium) : "",
      utmCampaign: isSet(object.utmCampaign) ? globalThis.String(object.utmCampaign) : "",
      utmTerm: isSet(object.utmTerm) ? globalThis.String(object.utmTerm) : "",
      utmContent: isSet(object.utmContent) ? globalThis.String(object.utmContent) : "",
      gclid: isSet(object.gclid) ? globalThis.String(object.gclid) : "",
      fbclid: isSet(object.fbclid) ? globalThis.String(object.fbclid) : "",
      msclkid: isSet(object.msclkid) ? globalThis.String(object.msclkid) : "",
      dclid: isSet(object.dclid) ? globalThis.String(object.dclid) : "",
      adId: isSet(object.adId) ? globalThis.String(object.adId) : "",
      adName: isSet(object.adName) ? globalThis.String(object.adName) : "",
      adGroupId: isSet(object.adGroupId) ? globalThis.String(object.adGroupId) : "",
      adGroupName: isSet(object.adGroupName) ? globalThis.String(object.adGroupName) : "",
      gtmId: isSet(object.gtmId) ? globalThis.String(object.gtmId) : "",
      gtmEvent: isSet(object.gtmEvent) ? globalThis.String(object.gtmEvent) : "",
      gtmTrigger: isSet(object.gtmTrigger) ? globalThis.String(object.gtmTrigger) : "",
      gtmVariable: isSet(object.gtmVariable) ? globalThis.String(object.gtmVariable) : "",
      gtmDataLayer: isSet(object.gtmDataLayer) ? globalThis.String(object.gtmDataLayer) : "",
      gtmContainer: isSet(object.gtmContainer) ? globalThis.String(object.gtmContainer) : "",
      gtmAccount: isSet(object.gtmAccount) ? globalThis.String(object.gtmAccount) : "",
      gtmWorkspace: isSet(object.gtmWorkspace) ? globalThis.String(object.gtmWorkspace) : "",
      gtmVersion: isSet(object.gtmVersion) ? globalThis.String(object.gtmVersion) : "",
      gtmEnvironment: isSet(object.gtmEnvironment) ? globalThis.String(object.gtmEnvironment) : "",
    };
  },

  toJSON(message: AttributionParamKeys): unknown {
    const obj: any = {};
    if (message.urlParams !== "") {
      obj.urlParams = message.urlParams;
    }
    if (message.utmSource !== "") {
      obj.utmSource = message.utmSource;
    }
    if (message.utmMedium !== "") {
      obj.utmMedium = message.utmMedium;
    }
    if (message.utmCampaign !== "") {
      obj.utmCampaign = message.utmCampaign;
    }
    if (message.utmTerm !== "") {
      obj.utmTerm = message.utmTerm;
    }
    if (message.utmContent !== "") {
      obj.utmContent = message.utmContent;
    }
    if (message.gclid !== "") {
      obj.gclid = message.gclid;
    }
    if (message.fbclid !== "") {
      obj.fbclid = message.fbclid;
    }
    if (message.msclkid !== "") {
      obj.msclkid = message.msclkid;
    }
    if (message.dclid !== "") {
      obj.dclid = message.dclid;
    }
    if (message.adId !== "") {
      obj.adId = message.adId;
    }
    if (message.adName !== "") {
      obj.adName = message.adName;
    }
    if (message.adGroupId !== "") {
      obj.adGroupId = message.adGroupId;
    }
    if (message.adGroupName !== "") {
      obj.adGroupName = message.adGroupName;
    }
    if (message.gtmId !== "") {
      obj.gtmId = message.gtmId;
    }
    if (message.gtmEvent !== "") {
      obj.gtmEvent = message.gtmEvent;
    }
    if (message.gtmTrigger !== "") {
      obj.gtmTrigger = message.gtmTrigger;
    }
    if (message.gtmVariable !== "") {
      obj.gtmVariable = message.gtmVariable;
    }
    if (message.gtmDataLayer !== "") {
      obj.gtmDataLayer = message.gtmDataLayer;
    }
    if (message.gtmContainer !== "") {
      obj.gtmContainer = message.gtmContainer;
    }
    if (message.gtmAccount !== "") {
      obj.gtmAccount = message.gtmAccount;
    }
    if (message.gtmWorkspace !== "") {
      obj.gtmWorkspace = message.gtmWorkspace;
    }
    if (message.gtmVersion !== "") {
      obj.gtmVersion = message.gtmVersion;
    }
    if (message.gtmEnvironment !== "") {
      obj.gtmEnvironment = message.gtmEnvironment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AttributionParamKeys>, I>>(base?: I): AttributionParamKeys {
    return AttributionParamKeys.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AttributionParamKeys>, I>>(object: I): AttributionParamKeys {
    const message = createBaseAttributionParamKeys();
    message.urlParams = object.urlParams ?? "";
    message.utmSource = object.utmSource ?? "";
    message.utmMedium = object.utmMedium ?? "";
    message.utmCampaign = object.utmCampaign ?? "";
    message.utmTerm = object.utmTerm ?? "";
    message.utmContent = object.utmContent ?? "";
    message.gclid = object.gclid ?? "";
    message.fbclid = object.fbclid ?? "";
    message.msclkid = object.msclkid ?? "";
    message.dclid = object.dclid ?? "";
    message.adId = object.adId ?? "";
    message.adName = object.adName ?? "";
    message.adGroupId = object.adGroupId ?? "";
    message.adGroupName = object.adGroupName ?? "";
    message.gtmId = object.gtmId ?? "";
    message.gtmEvent = object.gtmEvent ?? "";
    message.gtmTrigger = object.gtmTrigger ?? "";
    message.gtmVariable = object.gtmVariable ?? "";
    message.gtmDataLayer = object.gtmDataLayer ?? "";
    message.gtmContainer = object.gtmContainer ?? "";
    message.gtmAccount = object.gtmAccount ?? "";
    message.gtmWorkspace = object.gtmWorkspace ?? "";
    message.gtmVersion = object.gtmVersion ?? "";
    message.gtmEnvironment = object.gtmEnvironment ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
