// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sample";

export interface Event {
  eventId: string;
  timestamp: number;
  aggregateId: string;
  userCreated?: UserCreated | undefined;
  userUpdated?: UserUpdated | undefined;
  userDeleted?: UserDeleted | undefined;
}

export interface UserCreated {
  email: string;
  username: string;
}

export interface UserUpdated {
  changedFields: { [key: string]: string };
}

export interface UserUpdated_ChangedFieldsEntry {
  key: string;
  value: string;
}

export interface UserDeleted {
  reason: string;
}

function createBaseEvent(): Event {
  return {
    eventId: "",
    timestamp: 0,
    aggregateId: "",
    userCreated: undefined,
    userUpdated: undefined,
    userDeleted: undefined,
  };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    if (message.timestamp !== 0) {
      writer.uint32(16).int64(message.timestamp);
    }
    if (message.aggregateId !== "") {
      writer.uint32(26).string(message.aggregateId);
    }
    if (message.userCreated !== undefined) {
      UserCreated.encode(message.userCreated, writer.uint32(34).fork()).join();
    }
    if (message.userUpdated !== undefined) {
      UserUpdated.encode(message.userUpdated, writer.uint32(42).fork()).join();
    }
    if (message.userDeleted !== undefined) {
      UserDeleted.encode(message.userDeleted, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.aggregateId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userCreated = UserCreated.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.userUpdated = UserUpdated.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.userDeleted = UserDeleted.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      aggregateId: isSet(object.aggregateId) ? globalThis.String(object.aggregateId) : "",
      userCreated: isSet(object.userCreated) ? UserCreated.fromJSON(object.userCreated) : undefined,
      userUpdated: isSet(object.userUpdated) ? UserUpdated.fromJSON(object.userUpdated) : undefined,
      userDeleted: isSet(object.userDeleted) ? UserDeleted.fromJSON(object.userDeleted) : undefined,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.aggregateId !== "") {
      obj.aggregateId = message.aggregateId;
    }
    if (message.userCreated !== undefined) {
      obj.userCreated = UserCreated.toJSON(message.userCreated);
    }
    if (message.userUpdated !== undefined) {
      obj.userUpdated = UserUpdated.toJSON(message.userUpdated);
    }
    if (message.userDeleted !== undefined) {
      obj.userDeleted = UserDeleted.toJSON(message.userDeleted);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.eventId = object.eventId ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.aggregateId = object.aggregateId ?? "";
    message.userCreated = (object.userCreated !== undefined && object.userCreated !== null)
      ? UserCreated.fromPartial(object.userCreated)
      : undefined;
    message.userUpdated = (object.userUpdated !== undefined && object.userUpdated !== null)
      ? UserUpdated.fromPartial(object.userUpdated)
      : undefined;
    message.userDeleted = (object.userDeleted !== undefined && object.userDeleted !== null)
      ? UserDeleted.fromPartial(object.userDeleted)
      : undefined;
    return message;
  },
};

function createBaseUserCreated(): UserCreated {
  return { email: "", username: "" };
}

export const UserCreated: MessageFns<UserCreated> = {
  encode(message: UserCreated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserCreated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserCreated {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: UserCreated): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserCreated>, I>>(base?: I): UserCreated {
    return UserCreated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserCreated>, I>>(object: I): UserCreated {
    const message = createBaseUserCreated();
    message.email = object.email ?? "";
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseUserUpdated(): UserUpdated {
  return { changedFields: {} };
}

export const UserUpdated: MessageFns<UserUpdated> = {
  encode(message: UserUpdated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.changedFields).forEach(([key, value]) => {
      UserUpdated_ChangedFieldsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserUpdated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = UserUpdated_ChangedFieldsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.changedFields[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserUpdated {
    return {
      changedFields: isObject(object.changedFields)
        ? Object.entries(object.changedFields).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: UserUpdated): unknown {
    const obj: any = {};
    if (message.changedFields) {
      const entries = Object.entries(message.changedFields);
      if (entries.length > 0) {
        obj.changedFields = {};
        entries.forEach(([k, v]) => {
          obj.changedFields[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserUpdated>, I>>(base?: I): UserUpdated {
    return UserUpdated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserUpdated>, I>>(object: I): UserUpdated {
    const message = createBaseUserUpdated();
    message.changedFields = Object.entries(object.changedFields ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseUserUpdated_ChangedFieldsEntry(): UserUpdated_ChangedFieldsEntry {
  return { key: "", value: "" };
}

export const UserUpdated_ChangedFieldsEntry: MessageFns<UserUpdated_ChangedFieldsEntry> = {
  encode(message: UserUpdated_ChangedFieldsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserUpdated_ChangedFieldsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserUpdated_ChangedFieldsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserUpdated_ChangedFieldsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: UserUpdated_ChangedFieldsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserUpdated_ChangedFieldsEntry>, I>>(base?: I): UserUpdated_ChangedFieldsEntry {
    return UserUpdated_ChangedFieldsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserUpdated_ChangedFieldsEntry>, I>>(
    object: I,
  ): UserUpdated_ChangedFieldsEntry {
    const message = createBaseUserUpdated_ChangedFieldsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseUserDeleted(): UserDeleted {
  return { reason: "" };
}

export const UserDeleted: MessageFns<UserDeleted> = {
  encode(message: UserDeleted, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserDeleted {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserDeleted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserDeleted {
    return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
  },

  toJSON(message: UserDeleted): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserDeleted>, I>>(base?: I): UserDeleted {
    return UserDeleted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserDeleted>, I>>(object: I): UserDeleted {
    const message = createBaseUserDeleted();
    message.reason = object.reason ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
