// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: example.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "business_logic";

export enum AnalyticsParams {
  url_params = 0,
  utm_source = 1,
  utm_medium = 2,
  utm_campaign = 3,
  utm_term = 4,
  utm_content = 5,
  gclid = 6,
  fbclid = 7,
  msclkid = 8,
  dclid = 9,
  ad_id = 10,
  ad_name = 11,
  ad_group_id = 12,
  ad_group_name = 13,
  gtm_id = 14,
  gtm_event = 15,
  gtm_trigger = 16,
  gtm_variable = 17,
  gtm_data_layer = 18,
  gtm_container = 19,
  gtm_account = 20,
  gtm_workspace = 21,
  gtm_version = 22,
  gtm_environment = 23,
  UNRECOGNIZED = -1,
}

export function analyticsParamsFromJSON(object: any): AnalyticsParams {
  switch (object) {
    case 0:
    case "url_params":
      return AnalyticsParams.url_params;
    case 1:
    case "utm_source":
      return AnalyticsParams.utm_source;
    case 2:
    case "utm_medium":
      return AnalyticsParams.utm_medium;
    case 3:
    case "utm_campaign":
      return AnalyticsParams.utm_campaign;
    case 4:
    case "utm_term":
      return AnalyticsParams.utm_term;
    case 5:
    case "utm_content":
      return AnalyticsParams.utm_content;
    case 6:
    case "gclid":
      return AnalyticsParams.gclid;
    case 7:
    case "fbclid":
      return AnalyticsParams.fbclid;
    case 8:
    case "msclkid":
      return AnalyticsParams.msclkid;
    case 9:
    case "dclid":
      return AnalyticsParams.dclid;
    case 10:
    case "ad_id":
      return AnalyticsParams.ad_id;
    case 11:
    case "ad_name":
      return AnalyticsParams.ad_name;
    case 12:
    case "ad_group_id":
      return AnalyticsParams.ad_group_id;
    case 13:
    case "ad_group_name":
      return AnalyticsParams.ad_group_name;
    case 14:
    case "gtm_id":
      return AnalyticsParams.gtm_id;
    case 15:
    case "gtm_event":
      return AnalyticsParams.gtm_event;
    case 16:
    case "gtm_trigger":
      return AnalyticsParams.gtm_trigger;
    case 17:
    case "gtm_variable":
      return AnalyticsParams.gtm_variable;
    case 18:
    case "gtm_data_layer":
      return AnalyticsParams.gtm_data_layer;
    case 19:
    case "gtm_container":
      return AnalyticsParams.gtm_container;
    case 20:
    case "gtm_account":
      return AnalyticsParams.gtm_account;
    case 21:
    case "gtm_workspace":
      return AnalyticsParams.gtm_workspace;
    case 22:
    case "gtm_version":
      return AnalyticsParams.gtm_version;
    case 23:
    case "gtm_environment":
      return AnalyticsParams.gtm_environment;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AnalyticsParams.UNRECOGNIZED;
  }
}

export function analyticsParamsToJSON(object: AnalyticsParams): string {
  switch (object) {
    case AnalyticsParams.url_params:
      return "url_params";
    case AnalyticsParams.utm_source:
      return "utm_source";
    case AnalyticsParams.utm_medium:
      return "utm_medium";
    case AnalyticsParams.utm_campaign:
      return "utm_campaign";
    case AnalyticsParams.utm_term:
      return "utm_term";
    case AnalyticsParams.utm_content:
      return "utm_content";
    case AnalyticsParams.gclid:
      return "gclid";
    case AnalyticsParams.fbclid:
      return "fbclid";
    case AnalyticsParams.msclkid:
      return "msclkid";
    case AnalyticsParams.dclid:
      return "dclid";
    case AnalyticsParams.ad_id:
      return "ad_id";
    case AnalyticsParams.ad_name:
      return "ad_name";
    case AnalyticsParams.ad_group_id:
      return "ad_group_id";
    case AnalyticsParams.ad_group_name:
      return "ad_group_name";
    case AnalyticsParams.gtm_id:
      return "gtm_id";
    case AnalyticsParams.gtm_event:
      return "gtm_event";
    case AnalyticsParams.gtm_trigger:
      return "gtm_trigger";
    case AnalyticsParams.gtm_variable:
      return "gtm_variable";
    case AnalyticsParams.gtm_data_layer:
      return "gtm_data_layer";
    case AnalyticsParams.gtm_container:
      return "gtm_container";
    case AnalyticsParams.gtm_account:
      return "gtm_account";
    case AnalyticsParams.gtm_workspace:
      return "gtm_workspace";
    case AnalyticsParams.gtm_version:
      return "gtm_version";
    case AnalyticsParams.gtm_environment:
      return "gtm_environment";
    case AnalyticsParams.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UrlAnalyticsRequest {
  url: string;
  paramsToSearch: AnalyticsParams[];
}

export interface UrlAnalyticsResponse {
  foundParams: { [key: string]: string };
}

export interface UrlAnalyticsResponse_FoundParamsEntry {
  key: string;
  value: string;
}

function createBaseUrlAnalyticsRequest(): UrlAnalyticsRequest {
  return { url: "", paramsToSearch: [] };
}

export const UrlAnalyticsRequest: MessageFns<UrlAnalyticsRequest> = {
  encode(message: UrlAnalyticsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    writer.uint32(18).fork();
    for (const v of message.paramsToSearch) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UrlAnalyticsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUrlAnalyticsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.paramsToSearch.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.paramsToSearch.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UrlAnalyticsRequest {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      paramsToSearch: globalThis.Array.isArray(object?.paramsToSearch)
        ? object.paramsToSearch.map((e: any) => analyticsParamsFromJSON(e))
        : [],
    };
  },

  toJSON(message: UrlAnalyticsRequest): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.paramsToSearch?.length) {
      obj.paramsToSearch = message.paramsToSearch.map((e) => analyticsParamsToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UrlAnalyticsRequest>, I>>(base?: I): UrlAnalyticsRequest {
    return UrlAnalyticsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UrlAnalyticsRequest>, I>>(object: I): UrlAnalyticsRequest {
    const message = createBaseUrlAnalyticsRequest();
    message.url = object.url ?? "";
    message.paramsToSearch = object.paramsToSearch?.map((e) => e) || [];
    return message;
  },
};

function createBaseUrlAnalyticsResponse(): UrlAnalyticsResponse {
  return { foundParams: {} };
}

export const UrlAnalyticsResponse: MessageFns<UrlAnalyticsResponse> = {
  encode(message: UrlAnalyticsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.foundParams).forEach(([key, value]) => {
      UrlAnalyticsResponse_FoundParamsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UrlAnalyticsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUrlAnalyticsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = UrlAnalyticsResponse_FoundParamsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.foundParams[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UrlAnalyticsResponse {
    return {
      foundParams: isObject(object.foundParams)
        ? Object.entries(object.foundParams).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: UrlAnalyticsResponse): unknown {
    const obj: any = {};
    if (message.foundParams) {
      const entries = Object.entries(message.foundParams);
      if (entries.length > 0) {
        obj.foundParams = {};
        entries.forEach(([k, v]) => {
          obj.foundParams[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UrlAnalyticsResponse>, I>>(base?: I): UrlAnalyticsResponse {
    return UrlAnalyticsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UrlAnalyticsResponse>, I>>(object: I): UrlAnalyticsResponse {
    const message = createBaseUrlAnalyticsResponse();
    message.foundParams = Object.entries(object.foundParams ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseUrlAnalyticsResponse_FoundParamsEntry(): UrlAnalyticsResponse_FoundParamsEntry {
  return { key: "", value: "" };
}

export const UrlAnalyticsResponse_FoundParamsEntry: MessageFns<UrlAnalyticsResponse_FoundParamsEntry> = {
  encode(message: UrlAnalyticsResponse_FoundParamsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UrlAnalyticsResponse_FoundParamsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUrlAnalyticsResponse_FoundParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UrlAnalyticsResponse_FoundParamsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: UrlAnalyticsResponse_FoundParamsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UrlAnalyticsResponse_FoundParamsEntry>, I>>(
    base?: I,
  ): UrlAnalyticsResponse_FoundParamsEntry {
    return UrlAnalyticsResponse_FoundParamsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UrlAnalyticsResponse_FoundParamsEntry>, I>>(
    object: I,
  ): UrlAnalyticsResponse_FoundParamsEntry {
    const message = createBaseUrlAnalyticsResponse_FoundParamsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

export interface AnalyticsService {
  SearchUrlParams(request: UrlAnalyticsRequest): Promise<UrlAnalyticsResponse>;
}

export const AnalyticsServiceServiceName = "business_logic.AnalyticsService";
export class AnalyticsServiceClientImpl implements AnalyticsService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AnalyticsServiceServiceName;
    this.rpc = rpc;
    this.SearchUrlParams = this.SearchUrlParams.bind(this);
  }
  SearchUrlParams(request: UrlAnalyticsRequest): Promise<UrlAnalyticsResponse> {
    const data = UrlAnalyticsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SearchUrlParams", data);
    return promise.then((data) => UrlAnalyticsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
